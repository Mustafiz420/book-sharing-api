{
  "info": {
    "_postman_id": "b6e7e1b6-8c2f-4f3b-9c92-7b7b5e3a2a10",
    "name": "Book Sharing API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Postman collection for Book Sharing Platform APIs (Laravel 10 + Passport)."
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/register",
              "host": ["{{base_url}}"],
              "path": ["api", "register"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password\",\n  \"latitude\": 23.7806,\n  \"longitude\": 90.2792\n}"
            }
          },
          "response": []
        },
        {
          "name": "Login (User - John)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": ["{{base_url}}"],
              "path": ["api", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"secret123\"\n}"
            },
            "description": "Logs in as John (seeded user) and sets collection variable `token`."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = pm.response.json();",
                  "if (json && json.data && json.data.token) {",
                  "  pm.collectionVariables.set('token', json.data.token);",
                  "  pm.test('Token captured', function () { pm.expect(json.data.token).to.be.a('string'); });",
                  "} else {",
                  "  pm.test('Token missing in response', function () { pm.expect.fail('No token in response'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login (Admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{base_url}}/api/login",
              "host": ["{{base_url}}"],
              "path": ["api", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"Admin@123456\"\n}"
            },
            "description": "Logs in as Admin and sets collection variable `admin_token`."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const json = pm.response.json();",
                  "if (json && json.data && json.data.token) {",
                  "  pm.collectionVariables.set('admin_token', json.data.token);",
                  "  pm.test('Admin token captured', function () { pm.expect(json.data.token).to.be.a('string'); });",
                  "} else {",
                  "  pm.test('Admin token missing', function () { pm.expect.fail('No token in response'); });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Books (User)",
      "item": [
        {
          "name": "Share Book",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/books",
              "host": ["{{base_url}}"],
              "path": ["api", "books"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Pragmatic Programmer\",\n  \"author\": \"Andrew Hunt\",\n  \"description\": \"Classic software engineering book.\"\n}"
            }
          },
          "response": []
        },
        {
          "name": "Nearby Books",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/books/nearby",
              "host": ["{{base_url}}"],
              "path": ["api", "books", "nearby"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "All Users",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{admin_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/users",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "users"]
            }
          },
          "response": []
        },
        {
          "name": "All Books",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{admin_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/books",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "books"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Book",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{admin_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/books/{{book_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "books", "{{book_id}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    { "key": "base_url", "value": "http://127.0.0.1:8000" },
    { "key": "token", "value": "" },
    { "key": "admin_token", "value": "" },
    { "key": "book_id", "value": "1" }
  ]
}
